"""Create initial database schema

Revision ID: d6adfac5defe
Revises:
Create Date: YYYY-MM-DD HH:MM:SS.ffffff
"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql # For UUID and other PG specific types

# Manually define Enum types for database creation
# These names ('accounttype', 'creditcardbrand', etc.) will be the names of the ENUM types in PostgreSQL.
account_type_enum = postgresql.ENUM('checking', 'savings', 'investment', 'wallet', 'other', name='accounttype', create_type=True)
credit_card_brand_enum = postgresql.ENUM('visa', 'mastercard', 'amex', 'elo', 'hipercard', 'other', name='creditcardbrand', create_type=True)
transaction_type_enum = postgresql.ENUM('income', 'expense', 'transfer', name='transactiontype', create_type=True)
recurring_transaction_frequency_enum = postgresql.ENUM('daily', 'weekly', 'monthly', 'bimonthly', 'quarterly', 'semi_annually', 'annually', name='recurringtransactionfrequency', create_type=True)

# revision identifiers, used by Alembic.
revision: str = 'd6adfac5defe' # Keep the actual revision ID
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - START ###
    # (Alembic might put some comments here, they can be kept or removed)

    op.create_table('user_profiles',
        sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_user_profiles'))
    )
    op.create_index(op.f('ix_user_profiles_id'), 'user_profiles', ['id'], unique=False)

    op.create_table('categories',
        sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('description', sa.String(), nullable=True),
        sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], ['user_profiles.id'], name=op.f('fk_categories_user_id_user_profiles')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_categories'))
    )
    op.create_index(op.f('ix_categories_id'), 'categories', ['id'], unique=False)
    op.create_index(op.f('ix_categories_name'), 'categories', ['name'], unique=True) # Assuming name is globally unique as per model
    op.create_index(op.f('ix_categories_user_id'), 'categories', ['user_id'], unique=False)


    op.create_table('accounts',
        sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('type', account_type_enum, nullable=True), # Using the defined enum
        sa.Column('balance', sa.Numeric(precision=15, scale=2), nullable=True),
        sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], ['user_profiles.id'], name=op.f('fk_accounts_user_id_user_profiles')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_accounts'))
    )
    op.create_index(op.f('ix_accounts_id'), 'accounts', ['id'], unique=False)
    op.create_index(op.f('ix_accounts_name'), 'accounts', ['name'], unique=False) # Name uniqueness per user handled by app logic
    op.create_index(op.f('ix_accounts_user_id'), 'accounts', ['user_id'], unique=False)


    op.create_table('credit_cards',
        sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('brand', credit_card_brand_enum, nullable=True), # Using the defined enum
        sa.Column('limit', sa.Numeric(precision=15, scale=2), nullable=False),
        sa.Column('due_day', sa.Integer(), nullable=False),
        sa.Column('closing_day', sa.Integer(), nullable=False),
        sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], ['user_profiles.id'], name=op.f('fk_credit_cards_user_id_user_profiles')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_credit_cards'))
    )
    op.create_index(op.f('ix_credit_cards_id'), 'credit_cards', ['id'], unique=False)
    op.create_index(op.f('ix_credit_cards_user_id'), 'credit_cards', ['user_id'], unique=False)

    op.create_table('recurring_transactions',
        sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('description', sa.String(), nullable=False),
        sa.Column('amount', sa.Numeric(precision=15, scale=2), nullable=False),
        sa.Column('frequency', recurring_transaction_frequency_enum, nullable=True), # Using the defined enum
        sa.Column('start_date', sa.Date(), nullable=False),
        sa.Column('end_date', sa.Date(), nullable=True),
        sa.Column('transaction_type', transaction_type_enum, nullable=True), # Using the defined enum
        sa.Column('notes', sa.String(), nullable=True),
        sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('account_id', postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column('credit_card_id', postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column('category_id', postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], name=op.f('fk_recurring_transactions_account_id_accounts')),
        sa.ForeignKeyConstraint(['category_id'], ['categories.id'], name=op.f('fk_recurring_transactions_category_id_categories')),
        sa.ForeignKeyConstraint(['credit_card_id'], ['credit_cards.id'], name=op.f('fk_recurring_transactions_credit_card_id_credit_cards')),
        sa.ForeignKeyConstraint(['user_id'], ['user_profiles.id'], name=op.f('fk_recurring_transactions_user_id_user_profiles')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_recurring_transactions'))
    )
    op.create_index(op.f('ix_recurring_transactions_id'), 'recurring_transactions', ['id'], unique=False)
    op.create_index(op.f('ix_recurring_transactions_user_id'), 'recurring_transactions', ['user_id'], unique=False)


    op.create_table('transactions',
        sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('description', sa.String(), nullable=False),
        sa.Column('amount', sa.Numeric(precision=15, scale=2), nullable=False),
        sa.Column('transaction_date', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('type', transaction_type_enum, nullable=True), # Using the defined enum
        sa.Column('notes', sa.String(), nullable=True),
        sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('account_id', postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column('credit_card_id', postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column('category_id', postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column('from_account_id', postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column('to_account_id', postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], name=op.f('fk_transactions_account_id_accounts')),
        sa.ForeignKeyConstraint(['category_id'], ['categories.id'], name=op.f('fk_transactions_category_id_categories')),
        sa.ForeignKeyConstraint(['credit_card_id'], ['credit_cards.id'], name=op.f('fk_transactions_credit_card_id_credit_cards')),
        sa.ForeignKeyConstraint(['from_account_id'], ['accounts.id'], name=op.f('fk_transactions_from_account_id_accounts')),
        sa.ForeignKeyConstraint(['to_account_id'], ['accounts.id'], name=op.f('fk_transactions_to_account_id_accounts')),
        sa.ForeignKeyConstraint(['user_id'], ['user_profiles.id'], name=op.f('fk_transactions_user_id_user_profiles')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_transactions'))
    )
    op.create_index(op.f('ix_transactions_account_id'), 'transactions', ['account_id'], unique=False)
    op.create_index(op.f('ix_transactions_category_id'), 'transactions', ['category_id'], unique=False)
    op.create_index(op.f('ix_transactions_credit_card_id'), 'transactions', ['credit_card_id'], unique=False)
    op.create_index(op.f('ix_transactions_description'), 'transactions', ['description'], unique=False)
    op.create_index(op.f('ix_transactions_from_account_id'), 'transactions', ['from_account_id'], unique=False)
    op.create_index(op.f('ix_transactions_id'), 'transactions', ['id'], unique=False)
    op.create_index(op.f('ix_transactions_to_account_id'), 'transactions', ['to_account_id'], unique=False)
    op.create_index(op.f('ix_transactions_user_id'), 'transactions', ['user_id'], unique=False)

    op.create_table('installments',
        sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('transaction_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('installment_number', sa.Integer(), nullable=False),
        sa.Column('total_installments', sa.Integer(), nullable=False),
        sa.Column('amount', sa.Numeric(precision=15, scale=2), nullable=False),
        sa.Column('due_date', sa.Date(), nullable=False),
        sa.Column('is_paid', sa.Boolean(), server_default=sa.false(), nullable=False),
        sa.ForeignKeyConstraint(['transaction_id'], ['transactions.id'], name=op.f('fk_installments_transaction_id_transactions')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_installments'))
    )
    op.create_index(op.f('ix_installments_id'), 'installments', ['id'], unique=False)
    op.create_index(op.f('ix_installments_transaction_id'), 'installments', ['transaction_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - START ###
    op.drop_index(op.f('ix_installments_transaction_id'), table_name='installments')
    op.drop_index(op.f('ix_installments_id'), table_name='installments')
    op.drop_table('installments')

    op.drop_index(op.f('ix_transactions_user_id'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_to_account_id'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_id'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_from_account_id'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_description'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_credit_card_id'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_category_id'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_account_id'), table_name='transactions')
    op.drop_table('transactions')

    op.drop_index(op.f('ix_recurring_transactions_user_id'), table_name='recurring_transactions')
    op.drop_index(op.f('ix_recurring_transactions_id'), table_name='recurring_transactions')
    op.drop_table('recurring_transactions')

    op.drop_index(op.f('ix_credit_cards_user_id'), table_name='credit_cards')
    op.drop_index(op.f('ix_credit_cards_id'), table_name='credit_cards')
    op.drop_table('credit_cards')

    op.drop_index(op.f('ix_accounts_user_id'), table_name='accounts')
    op.drop_index(op.f('ix_accounts_name'), table_name='accounts')
    op.drop_index(op.f('ix_accounts_id'), table_name='accounts')
    op.drop_table('accounts')

    op.drop_index(op.f('ix_categories_user_id'), table_name='categories')
    op.drop_index(op.f('ix_categories_name'), table_name='categories')
    op.drop_index(op.f('ix_categories_id'), table_name='categories')
    op.drop_table('categories')

    op.drop_index(op.f('ix_user_profiles_id'), table_name='user_profiles')
    op.drop_table('user_profiles')

    # Drop ENUM types (must be done after tables using them are dropped)
    # The order of dropping enums usually doesn't matter unless they depend on each other.
    recurring_transaction_frequency_enum.drop(op.get_bind(), checkfirst=False)
    transaction_type_enum.drop(op.get_bind(), checkfirst=False)
    credit_card_brand_enum.drop(op.get_bind(), checkfirst=False)
    account_type_enum.drop(op.get_bind(), checkfirst=False)
    # ### end Alembic commands ###
