"""create_trigger_for_user_profile_creation

Revision ID: d46394d35f73
Revises: 6e4a6b14feee
Create Date: <auto-generated-date-will-be-set-by-script>

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
# import sqlmodel # Uncomment if you need to reference SQLModel types directly

# revision identifiers, used by Alembic.
revision: str = 'd46394d35f73' # Set to the auto-generated ID
down_revision: Union[str, None] = '6e4a6b14feee' # Set this to the ID of the "create_user_profiles_table" migration
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # Create the function that will be called by the trigger
    op.execute("""
    CREATE OR REPLACE FUNCTION public.handle_new_supabase_user()
    RETURNS TRIGGER AS $$
    BEGIN
        -- Attempt to extract full_name from raw_user_meta_data if available
        -- Supabase often stores name under 'name' or 'full_name' in raw_user_meta_data
        -- Adjust the path 'name' as necessary based on actual Supabase registration setup
        DECLARE
            v_full_name TEXT;
        BEGIN
            v_full_name := NEW.raw_user_meta_data->>'full_name'; -- Defaulting to 'full_name'
            IF v_full_name IS NULL THEN
                v_full_name := NEW.raw_user_meta_data->>'name'; -- Fallback to 'name'
            END IF;
        EXCEPTION WHEN OTHERS THEN
            v_full_name := NULL; -- Set to NULL if parsing fails or field doesn't exist
        END;

        INSERT INTO public.user_profiles (id, full_name, default_currency_code, created_at, updated_at)
        VALUES (
            NEW.id,
            v_full_name, -- Use extracted full_name or NULL
            'BRL',       -- Default currency code
            NOW(),       -- Default created_at
            NOW()        -- Default updated_at
        );
        RETURN NEW;
    END;
    $$ LANGUAGE plpgsql SECURITY DEFINER;
    """)

    # Create the trigger on the auth.users table
    # This assumes Supabase allows triggers to be created by the current role on auth.users
    # The role needs to be a superuser or have specific permissions.
    # If this fails, it might need to be run manually by a superuser or via Supabase dashboard SQL editor.
    op.execute("""
    CREATE TRIGGER on_supabase_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_new_supabase_user();
    """)


def downgrade() -> None:
    # Drop the trigger
    op.execute("""
    DROP TRIGGER IF EXISTS on_supabase_user_created ON auth.users;
    """)

    # Drop the function
    op.execute("""
    DROP FUNCTION IF EXISTS public.handle_new_supabase_user();
    """)
